use base64::engine::{general_purpose as b64_general_purpose, Engine};
use ethers_helpers::gen_update_wallet_signature;
use helpers::{
    _compute_poseidon_hash, biguint_from_hex_string, deserialize_wallet, get_match_key,
    get_root_key, point_coord_to_string,
};
use k256::{
    ecdsa::{signature::Signer, Signature},
    elliptic_curve::sec1::ToEncodedPoint,
};
use types::ScalarField;
use wasm_bindgen::prelude::*;

const SIG_VALIDITY_WINDOW_MS: u64 = 10_000; // 10 seconds

#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(typescript_type = "bigint")]
    pub type BigInt;
}

pub mod custom_serde;
pub mod ethers_helpers;
pub mod helpers;
pub mod types;

/// Generates a signature for a wallet update operation.
///
/// This function takes a serialized wallet and the root secret key as inputs,
/// generates a signature for the wallet update, and returns the signature as a hex-encoded string.
///
/// # Arguments
///
/// * `wallet_str` - A string slice that holds the serialized wallet data.
/// * `sk_root` - A string slice that holds the root secret key.
///
/// # Returns
///
/// A `JsValue` containing the hex-encoded signature string.
#[wasm_bindgen]
pub fn generate_wallet_update_signature(wallet_str: &str, sk_root: &str) -> JsValue {
    let wallet = deserialize_wallet(wallet_str);

    let (signing_key, _) = get_root_key(sk_root);

    let sig = gen_update_wallet_signature(wallet, &signing_key);
    let sig_bytes = sig.to_vec();

    JsValue::from_str(&hex::encode(sig_bytes))
}

/// Computes the Poseidon2 hash of the input string and returns a BigInt.
///
/// Note: Ensure the input is within the field of the BN254 curve and is a BigInt formatted as a hex string.
#[wasm_bindgen]
pub fn compute_poseidon_hash(value: &str) -> BigInt {
    let input = [ScalarField::from(biguint_from_hex_string(value))];
    let res = _compute_poseidon_hash(&input);

    // Convert the hash result to a JavaScript BigInt
    let js_bigint: JsValue = res.to_string().into();
    js_bigint.unchecked_into::<BigInt>()
}

/// Get the shares of the key hierarchy computed from `sk_root`
///
/// # Arguments
///
/// * `sk_root` - The root key to compute the hierarchy from.
///
/// # Returns
/// * String representation of the shares of the key hierarchy.
#[wasm_bindgen]
pub fn get_key_hierarchy_shares(sk_root: &str) -> Vec<JsValue> {
    let (sk_root, pk_root) = get_root_key(sk_root);

    let encoded_key = pk_root.as_affine().to_encoded_point(false /* compress */);
    let x_coord = point_coord_to_string(encoded_key.x().unwrap());
    let y_coord = point_coord_to_string(encoded_key.y().unwrap());

    let (_, pk_match) = get_match_key(sk_root);

    vec![
        JsValue::from_str(x_coord[0].as_str()),
        JsValue::from_str(x_coord[1].as_str()),
        JsValue::from_str(y_coord[0].as_str()),
        JsValue::from_str(y_coord[1].as_str()),
        JsValue::from_str(&pk_match.key.to_string()),
    ]
}

/// Get the string representation of the key hierarchy computed from `sk_root`
///
/// # Arguments
///
/// * `sk_root` - The root key to compute the hierarchy from.
///
/// # Returns
/// * String representation of the key hierarchy.
#[wasm_bindgen]
pub fn get_key_hierarchy(sk_root: &str) -> JsValue {
    let (sk_root, pk_root) = get_root_key(sk_root);
    let (sk_match, pk_match) = get_match_key(sk_root.clone());
    let key_hierarchy = format!(
        r#"{{"public_keys":{{"pk_root":"0x{}","pk_match":"0x{}"}},"private_keys":{{"sk_root":"0x{}","sk_match":"0x{}"}}}}"#,
        hex::encode(pk_root.to_encoded_point(false).as_bytes()), // pk_root
        pk_match.serialize_to_hex(),                             // pk_match
        hex::encode(sk_root.to_bytes()),                         // sk_root
        sk_match.serialize_to_hex()                              // sk_match
    );

    JsValue::from_str(&key_hierarchy)
}

/// Sign the body of a request with `sk_root`
///
/// # Arguments
///
/// * `message` - The message to be signed.
/// * `expiration` - The expiration time of the signature TODO
/// * `key` - Hex representatino of the key to sign the message with.
///
/// # Returns
///
/// * A vector of JavaScript values. The first element is the signature header,
///   and the second element is the expiration time of the signature.
#[wasm_bindgen]
pub fn sign_http_request(message: &str, timestamp: u64, key: &str) -> Vec<JsValue> {
    let message_bytes = message.as_bytes();
    let expiration = timestamp + SIG_VALIDITY_WINDOW_MS;
    let payload = [message_bytes, &expiration.to_le_bytes()].concat();

    let (signing_key, _) = get_root_key(key);
    let sig: Signature = signing_key.sign(&payload);
    let sig_bytes = sig.to_bytes().to_vec();
    let sig_header = b64_general_purpose::STANDARD_NO_PAD.encode(sig_bytes);

    vec![
        JsValue::from_str(&sig_header),
        JsValue::from_str(&expiration.to_string()),
    ]
}

/// Sign a message with a given key
///
/// # Arguments
///
/// * `message` - The message to be signed.
/// * `key` - The key to sign the message with.
///
/// # Returns
///
/// * A `JsValue` containing the hexadecimal string representation of the signature.
#[wasm_bindgen]
pub fn sign_message(message: &str, key: &str) -> JsValue {
    let message_bytes = message.as_bytes();

    let (signing_key, _) = get_root_key(key);
    let sig: Signature = signing_key.sign(&message_bytes);
    let sig_hex = hex::encode(sig.to_bytes());

    JsValue::from_str(&sig_hex)
}

/// Get the verifying key from a signing key
///
/// # Arguments
///
/// * `key` - Hex representation of the signing key.
///
/// # Returns
///
/// * A `JsValue` containing the hexadecimal string representation of the verifying key.
#[wasm_bindgen]
pub fn get_verifying_key(key: &str) -> JsValue {
    let (_, verifying_key) = get_root_key(key);
    let verifying_key_hex = hex::encode(verifying_key.to_encoded_point(false).as_bytes());

    JsValue::from_str(&verifying_key_hex)
}

#[wasm_bindgen]
pub fn hex_to_b64(hex: &str) -> JsValue {
    let bytes = hex::decode(hex).unwrap();
    let b64 = b64_general_purpose::STANDARD_NO_PAD.encode(bytes);

    JsValue::from_str(&b64)
}

#[cfg(test)]
mod tests {
    use crate::custom_serde::BytesSerializable;
    use crate::ethers_helpers::gen_update_wallet_signature;
    use crate::helpers::{
        _compute_poseidon_hash, biguint_from_hex_string, deserialize_wallet, get_match_key,
        get_root_key, point_coord_to_string,
    };

    #[test]
    fn test_deserialize_compute_shares_commitment() {
        let api_wallet_str = r#"{"id":"a2779c59-2489-4532-bbb8-d1918bc41cf5","orders":[{"id":"79e98e5f-ca6b-48b2-8246-1a2c7272e83e","quote_mint":"0x4af567288e68cad4aa93a272fe6139ca53859c70","base_mint":"0x408da76e87511429485c32e4ad647dd14823fdc4","side":"Buy","type":"Midpoint","worst_case_price":1048576.0,"amount":[1],"timestamp":1705716936925}],"balances":[{"mint":"0x4af567288e68cad4aa93a272fe6139ca53859c70","amount":[3000]}],"fees":[],"key_chain":{"public_keys":{"pk_root":"0x047f889d9b77ee3466b3b0ceee6a68f9180a5c84489ef79d7e613246fc8d5c29a14879133d0b88d23e0e2501f95b218f4e2aae4445e07844a9e7149c0c8f4e3fa3","pk_match":"0x13a88e1a959fd62ea5f70e2096ee26670a98f1a08470f4864c45c25b93c1fbc3"},"private_keys":{"sk_root":"0x414cbf18e75998b3e069ef09c52b5a61c1ecd2898df59d4422f8816097eaa302","sk_match":"0x71ac3e4eead35d247484850dd0aa4a0d61a43eb42f60be59fd04a660c6b3ef5"}},"blinded_public_shares":[[2096840402,299454455,826914945,2457497095,2068186486,3233499942,1514879824,801772093],[2935540539,2509486868,1282899130,3499513460,3154241870,1036689854,4008948488,414639364],[2555004605,3341862311,1997234381,4063827337,2233215770,595719793,862520851,638172572],[1227813990,79522181,1447281730,3150289047,803191519,1785792634,2182822138,541031097],[4226559533,1016254283,5964425,2585386448,1132062056,2956294131,3690708231,57819009],[2780331762,487408692,1403650973,1953197095,758079494,2928574041,1788559264,587959420],[701021237,580487042,1730595463,2956769495,2622220034,1839474898,4034723143,629420931],[4174397259,3257208087,1283266026,840593519,1873854576,3711071077,3224340850,790530865],[263317473,1499180580,3254030666,1379602603,2749051958,879239776,331291060,646700563],[2616714515,2806860326,1617047004,2156476953,1366912389,2441839114,2039167670,292953411],[3885571556,2026331907,2208660822,989371807,740143457,1098036300,1622233589,3761407],[2372297766,720779334,3633303419,469483309,3236097403,214619152,1605556,673836960],[1369026370,2318764497,696574850,1181150965,1281493580,1116465341,2394712911,418147458],[3333785849,510431279,1097591504,4069415791,1735084045,1548640538,1905749703,282615578],[1772745513,2675878759,2288780489,1288698899,3241289493,2836298419,2338959308,16069],[1104195003,1278049902,3737997327,242188484,2939748085,2280783677,3012626390,163937312],[1667065312,1147593163,3301848104,2087260253,2896055856,2538963866,3293545498,565344590],[1417110969,4071328894,1160982727,1875120917,1568345753,520012417,1992387927,679605533],[2372100077,1790285567,935789338,1900298614,3252536542,1577777150,4184091274,671567618],[1237704687,2076416111,2148064877,196697783,3723464345,1700352934,3075466118,709656663],[1040440152,3852052733,848933817,2675822111,2671216595,3856181864,2265402780,559653945],[1705765323,3040724678,2071605791,37614511,564659744,2205092559,3786938579,720124578],[2419033313,117928230,2124782536,3460511532,2862714704,766807403,166493502,438846693],[1454900135,1151876561,3065488023,2086594921,1033650628,2693690051,1529648163,557183557],[2572613034,562764352,2150886888,63412719,2817516643,3050547769,4009867186,314979852],[4164851950,2808300518,1351531973,2085751521,1843617220,2021419563,2314915683,765909337],[2216844809,3285891961,4140685868,3032931106,3409655697,4119904179,2753641136,347124127],[3936786302,480594465,2439367268,2197420691,229643045,1175433994,1934274812,553741480],[3639899690,455037360,701788558,375740726,1743029997,3748989119,3968767073,752326249],[2443086646,283983594,1868695600,2566022129,1167837650,2147837363,3462631961,693771361],[3658877553,1857489842,725196006,2831013991,4040507800,1295507927,871678792,724739336],[2934522661,1613043795,2619979977,2079319246,403016672,2472077001,3522413899,8969340],[1627632446,1848694612,2323973882,982216570,1853879840,1866231952,2110808460,70067978],[3465231446,3577353126,1548061336,1883800093,3677449631,3911838239,3715691863,557713145],[265947020,351678452,4061782644,3096937033,3115274868,437795782,977379567,398764982],[1673356216,326025700,1398794997,318049205,1387432687,1817644081,1055573555,708660363],[120023245,90845903,61273420,2206132503,710831561,1628822140,4204101924,125250975],[1436635236,964086479,202011527,2644607094,3723289620,474972244,244616715,565150026],[2520307174,3108149579,3227667570,481431890,3091231011,3390127024,1359075032,564714827],[894994378,2408999672,353733226,2830565808,2314093967,3622557069,378068676,493682381],[2462003933,3055584133,768190609,3983442219,2237272124,1664635180,4100397238,533366520],[3407754086,2599577291,3496171644,1228736005,1788548562,2473367550,2861763011,437352572],[3884387783,2469626638,2134902139,2956337498,595190668,1071647139,4025232705,357424662],[1199755186,4079044968,1942620525,1241957228,807360396,1006068364,1486932745,387318557],[2337356434,3811327445,815057403,2503213824,3795451845,4116125696,3017338775,728610136],[1085666434,1802486809,281014839,1061596887,1070838734,3242374647,3123155788,105914453],[12906150,1125887177,4052909805,2500534803,2853699502,1694002451,2964340678,655246190],[540683862,1944280590,2819465462,1535468864,3783607745,402765694,1477912273,691130471],[4285850591,3278045673,1116842314,1583405739,4134734822,3766060926,4068153036,215726975],[3060992166,4215825753,866825371,76611329,4117920079,349651700,3248544756,231163737],[3412154228,2404361743,2090768259,2771287837,466839630,1451267134,2809942333,562459500],[2934359329,2660264674,3865047516,1939620799,878711478,4069681921,3070970409,436525555],[3482733930,2282395960,1394324034,1488590089,3676177295,3333089549,1940067248,480725577],[1926488223,2934298099,1270021239,1031281160,2003889720,3127254080,2029439305,503967433]],"private_shares":[[3343443563,2324972899,78865036,1825048561,3330736437,1637933192,34001707,62534526],[1103481162,142123132,1056046048,2688767151,987084340,3834743280,1834900339,449667254],[1484014096,3604714985,341710796,2124453274,1908110440,4275713341,686360680,226134047],[2811204711,2572087819,891663448,3037991564,3338134691,3085640500,3661026689,323275521],[4107426464,1635355716,2332980753,3602894163,3009264154,1915139003,2153140596,806487609],[1258686939,2164201308,935294205,4235083516,3383246716,1942859093,4055289563,276347198],[3337997464,2071122958,608349715,3231511116,1519106176,3031958236,1809125684,234885687],[4159588738,3689369208,1055679151,1052719796,2267471635,1160362057,2619507977,73775753],[3775701228,1152429420,3379881808,513710711,1392274253,3992193358,1217590471,217606056],[1422304186,4139716970,721898173,4031803658,2774413821,2429594020,3804681157,571353207],[1823147864,3754180803,949890341,2618683408,2486041837,681128364,443489373,48665161],[2877039211,544907547,4214610948,3694067742,1988254070,361846686,1547275976,190469659],[2669992331,332845503,1642370328,712162350,2859832631,3754967793,3449135916,446159160],[705232853,2141178721,1241353674,2118864820,2406242165,3322792596,3938099124,581691040],[2534708643,3132865173,2302935871,4225091271,3022266384,3237833540,4021730949,52410498],[3549744111,1373560495,2895915147,1651124830,1201578126,2590649457,2831222437,700369306],[2371953389,1504016837,3332064370,4101020357,1245270354,2332469268,2550303329,298962028],[2621907732,2875248402,1177962450,18192398,2572980458,56453421,3851460901,184701085],[1666918624,861324433,1403155840,4287981997,888789668,3293655984,1659757553,192739000],[2801314014,575193889,190880301,1696615532,417861866,3171080200,2768382709,154649955],[2998578549,3094524563,1490011360,3512458500,1470109615,1015251270,3578446047,304652673],[2333253378,3905852618,267339386,1855698804,3576666467,2666340575,2056910248,144182040],[1619985388,2533681770,214162642,2727769079,1278611506,4104625731,1382388029,425459926],[2584118566,1499733439,3568424451,4101685689,3107675582,2177743083,19233368,307123062],[1466405667,2088845648,188058290,1829900596,1323809568,1820885365,1833981641,549326766],[4169134047,4138276777,987413204,4102529090,2297708990,2850013571,3528933144,98397281],[1822173892,3660685335,2493226605,3155349504,731670513,751528955,3090207691,517182491],[102232399,2171015535,4194545206,3990859919,3911683165,3695999140,3909574015,310565138],[399119011,2196572640,1637156620,1517572589,2398296214,1122444015,1875081754,111980369],[1595932055,2367626406,470249578,3622258482,2973488560,2723595771,2381216866,170535257],[380141148,794120158,1613749172,3357266620,100818410,3575925207,677202739,139567283],[1372931495,4194651561,1971736383,3434470924,1565571909,3602054959,2838276358,43457227],[2411386255,802915388,14971296,911096745,2287446371,3005201182,3733040367,794238640],[573787255,3369224170,790883841,9513222,463876580,959594895,2128156964,306593473],[3773071681,2299931548,2572129830,3091343577,1026051342,138670056,571501965,465541637],[2365662485,2325584300,940150181,1575264110,2753893524,3053789053,493307976,155646256],[3918995456,2560764097,2277671758,3982148108,3430494649,3242610994,1639746903,739055643],[2602383465,1687523521,2136933651,3543673517,418036590,101493594,1304264817,299156593],[1518711527,3838427717,3406244903,1411881424,1050095200,1481306110,189806499,299591792],[3144024323,242610328,1985211952,3357714803,1827232243,1248876065,1170812855,370624238],[1577014768,3890993163,1570754568,2204838392,1904054086,3206797954,1743451589,330940098],[631264615,52032709,3137740830,664577309,2352777649,2398065584,2982085816,426954046],[154630918,181983362,204043039,3231943113,3546135542,3799785995,1818616122,506881956],[2839263515,2867532328,396324652,651356087,3333965815,3865364770,61948786,476988062],[1701662267,3135249851,1523887774,3685066787,345874365,755307438,2826510052,135696482],[2953352267,849123191,2057930339,831716428,3070487477,1629058487,2720693039,758392165],[4026112551,1525722823,2581002669,3687745807,1287626708,3177430683,2879508149,209060428],[3498334839,707329410,3814447012,357844450,357718466,173700144,70969259,173176148],[2930101900,1882570727,2057509658,2755238887,3863577501,3433210362,1043352472,352599166],[978026537,2730751543,1472119806,1816701986,23406132,226814138,2595304072,633142881],[3299569915,2985253881,1971959087,3458566147,3030674981,565203891,3744264019,705861400],[1104659373,4286312622,2768864957,4248659811,3262614732,801751213,2772878418,427781063],[3035248422,1648854195,3166616286,582518714,2997338715,27807937,2119094522,713394572],[2112530478,4012279197,1068923938,862032155,2137436491,1744179054,3814409522,360339185]],"blinder":[12486860,1512728061,296749065,1218822875,1968588582,1779164664,2065722962,52426568],"update_locked":true}"#;
        let wallet = deserialize_wallet(api_wallet_str);
        let shares_commitment = _compute_poseidon_hash(
            &[
                vec![wallet.clone().get_private_share_commitment()],
                wallet.clone().blinded_public_shares,
            ]
            .concat(),
        )
        .serialize_to_bytes();

        println!("shares commitment: {:?}", shares_commitment);

        let sk_root = "0x414cbf18e75998b3e069ef09c52b5a61c1ecd2898df59d4422f8816097eaa302";
        let (signing_key, verifying_key) = get_root_key(sk_root);

        let sig = gen_update_wallet_signature(wallet, &signing_key);
        let sig_bytes = sig.to_vec();

        println!("shares commitment signature: {:?}", sig_bytes);
    }
}
