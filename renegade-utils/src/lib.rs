use base64::engine::{general_purpose as b64_general_purpose, Engine};
use ethers_helpers::gen_update_wallet_signature;
use helpers::{
    _compute_poseidon_hash, biguint_from_hex_string, deserialize_wallet, get_match_key,
    get_root_key, point_coord_to_string,
};
use k256::{
    ecdsa::{signature::Signer, Signature},
    elliptic_curve::sec1::ToEncodedPoint,
};
use types::ScalarField;
use wasm_bindgen::prelude::*;

const SIG_VALIDITY_WINDOW_MS: u64 = 10_000; // 10 seconds

#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(typescript_type = "bigint")]
    pub type BigInt;
}

pub mod custom_serde;
pub mod ethers_helpers;
pub mod helpers;
pub mod types;

/// Generates a signature for a wallet update operation.
///
/// This function takes a serialized wallet and the root secret key as inputs,
/// generates a signature for the wallet update, and returns the signature as a hex-encoded string.
///
/// # Arguments
///
/// * `wallet_str` - A string slice that holds the serialized wallet data.
/// * `sk_root` - A string slice that holds the root secret key.
///
/// # Returns
///
/// A `JsValue` containing the hex-encoded signature string.
#[wasm_bindgen]
pub fn generate_wallet_update_signature(wallet_str: &str, sk_root: &str) -> JsValue {
    let wallet = deserialize_wallet(wallet_str);

    let (signing_key, _) = get_root_key(sk_root);

    let sig = gen_update_wallet_signature(wallet, &signing_key);
    let sig_bytes = sig.to_vec();

    JsValue::from_str(&hex::encode(sig_bytes))
}

/// Computes the Poseidon2 hash of the input string and returns a BigInt.
///
/// Note: Ensure the input is within the field of the BN254 curve and is a BigInt formatted as a hex string.
#[wasm_bindgen]
pub fn compute_poseidon_hash(value: &str) -> BigInt {
    let input = [ScalarField::from(biguint_from_hex_string(value))];
    let res = _compute_poseidon_hash(&input);

    // Convert the hash result to a JavaScript BigInt
    let js_bigint: JsValue = res.to_string().into();
    js_bigint.unchecked_into::<BigInt>()
}

/// Get the shares of the key hierarchy computed from `sk_root`
///
/// # Arguments
///
/// * `sk_root` - The root key to compute the hierarchy from.
///
/// # Returns
/// * String representation of the shares of the key hierarchy.
#[wasm_bindgen]
pub fn get_key_hierarchy_shares(sk_root: &str) -> Vec<JsValue> {
    let (sk_root, pk_root) = get_root_key(sk_root);

    let encoded_key = pk_root.as_affine().to_encoded_point(false /* compress */);
    let x_coord = point_coord_to_string(encoded_key.x().unwrap());
    let y_coord = point_coord_to_string(encoded_key.y().unwrap());

    let (_, pk_match) = get_match_key(sk_root);

    vec![
        JsValue::from_str(x_coord[0].as_str()),
        JsValue::from_str(x_coord[1].as_str()),
        JsValue::from_str(y_coord[0].as_str()),
        JsValue::from_str(y_coord[1].as_str()),
        JsValue::from_str(&pk_match.key.to_string()),
    ]
}

/// Get the string representation of the key hierarchy computed from `sk_root`
///
/// # Arguments
///
/// * `sk_root` - The root key to compute the hierarchy from.
///
/// # Returns
/// * String representation of the key hierarchy.
#[wasm_bindgen]
pub fn get_key_hierarchy(sk_root: &str) -> JsValue {
    let (sk_root, pk_root) = get_root_key(sk_root);
    let (sk_match, pk_match) = get_match_key(sk_root.clone());
    let key_hierarchy = format!(
        r#"{{"public_keys":{{"pk_root":"0x{}","pk_match":"0x{}"}},"private_keys":{{"sk_root":"0x{}","sk_match":"0x{}"}}}}"#,
        hex::encode(pk_root.to_encoded_point(false).as_bytes()), // pk_root
        pk_match.serialize_to_hex(),                             // pk_match
        hex::encode(sk_root.to_bytes()),                         // sk_root
        sk_match.serialize_to_hex()                              // sk_match
    );

    JsValue::from_str(&key_hierarchy)
}

/// Sign the body of a request with `sk_root`
///
/// # Arguments
///
/// * `message` - The message to be signed.
/// * `expiration` - The expiration time of the signature TODO
/// * `key` - Hex representatino of the key to sign the message with.
///
/// # Returns
///
/// * A vector of JavaScript values. The first element is the signature header,
///   and the second element is the expiration time of the signature.
#[wasm_bindgen]
pub fn sign_http_request(message: &str, timestamp: u64, key: &str) -> Vec<JsValue> {
    let message_bytes = message.as_bytes();
    let expiration = timestamp + SIG_VALIDITY_WINDOW_MS;
    let payload = [message_bytes, &expiration.to_le_bytes()].concat();

    let (signing_key, _) = get_root_key(key);
    let sig: Signature = signing_key.sign(&payload);
    let sig_bytes = sig.to_bytes().to_vec();
    let sig_header = b64_general_purpose::STANDARD_NO_PAD.encode(sig_bytes);

    vec![
        JsValue::from_str(&sig_header),
        JsValue::from_str(&expiration.to_string()),
    ]
}

/// Sign a message with a given key
///
/// # Arguments
///
/// * `message` - The message to be signed.
/// * `key` - The key to sign the message with.
///
/// # Returns
///
/// * A `JsValue` containing the hexadecimal string representation of the signature.
#[wasm_bindgen]
pub fn sign_message(message: &str, key: &str) -> JsValue {
    let message_bytes = message.as_bytes();

    let (signing_key, _) = get_root_key(key);
    let sig: Signature = signing_key.sign(&message_bytes);
    let sig_hex = hex::encode(sig.to_bytes());

    JsValue::from_str(&sig_hex)
}

/// Get the verifying key from a signing key
///
/// # Arguments
///
/// * `key` - Hex representation of the signing key.
///
/// # Returns
///
/// * A `JsValue` containing the hexadecimal string representation of the verifying key.
#[wasm_bindgen]
pub fn get_verifying_key(key: &str) -> JsValue {
    let (_, verifying_key) = get_root_key(key);
    let verifying_key_hex = hex::encode(verifying_key.to_encoded_point(false).as_bytes());

    JsValue::from_str(&verifying_key_hex)
}

#[wasm_bindgen]
pub fn hex_to_b64(hex: &str) -> JsValue {
    let bytes = hex::decode(hex).unwrap();
    let b64 = b64_general_purpose::STANDARD_NO_PAD.encode(bytes);

    JsValue::from_str(&b64)
}

#[cfg(test)]
mod tests {
    use crate::custom_serde::BytesSerializable;
    use crate::ethers_helpers::gen_update_wallet_signature;
    use crate::helpers::{
        _compute_poseidon_hash, biguint_from_hex_string, deserialize_wallet, get_match_key,
        get_root_key, point_coord_to_string,
    };

    #[test]
    fn test_deserialize_compute_shares_commitment() {
        let api_wallet_str = r#"{"id":"a2779c59-2489-4532-bbb8-d1918bc41cf5","balances":[{"mint":"0x408da76e87511429485c32e4ad647dd14823fdc4","amount":1}],"orders":[{"id":"c2bf6443-8435-4eb0-a6a4-d84c6814ed3e","base_mint":"0x408da76e87511429485c32e4ad647dd14823fdc4","quote_mint":"0x39d9a294c9414d65ba7bc52e1d4f5d890ed02d6","side":"Sell","type":"Midpoint","amount":[1,0,0,0,0,0,0,0],"minimum_amount":null,"worst_case_price":0,"timestamp":1705627548397},{"id":"6cd57870-ff30-4b78-8bd2-7d068356de6e","base_mint":"0x408da76e87511429485c32e4ad647dd14823fdc4","quote_mint":"0x039d9a294c9414d65ba7bc52e1d4f5d890ed02d6","side":"Sell","type":"Midpoint","amount":[1,0,0,0,0,0,0,0],"minimum_amount":null,"worst_case_price":0,"timestamp":1705627630542}],"fees":[],"key_chain":{"public_keys":{"pk_root":"0x047f889d9b77ee3466b3b0ceee6a68f9180a5c84489ef79d7e613246fc8d5c29a14879133d0b88d23e0e2501f95b218f4e2aae4445e07844a9e7149c0c8f4e3fa3","pk_match":"0x13a88e1a959fd62ea5f70e2096ee26670a98f1a08470f4864c45c25b93c1fbc3"},"private_keys":{"sk_root":"0x414cbf18e75998b3e069ef09c52b5a61c1ecd2898df59d4422f8816097eaa302","sk_match":"0x71ac3e4eead35d247484850dd0aa4a0d61a43eb42f60be59fd04a660c6b3ef5"}},"blinder":[963124097,1949337195,1467146786,1728313919,1201371146,1136414379,2492192343,546389346],"blinded_public_shares":[[2770418347,701753993,4258469926,3962261292,3821532279,54506866,873124567,52793881],[3757382182,566784933,2670907668,3239453883,4213254253,1802392393,3537461511,331317156],[2155517905,3823812346,2512830847,178371222,2670386801,3685079612,1248052527,88598176],[3779117356,668462099,1277475982,3336872825,2348459849,2126754640,442626451,666804163],[1255870991,1979196718,1957267730,3625935712,2878882193,3674652950,4265102848,150940887],[160499062,436402540,353453400,14592583,1862697557,1134186548,760841954,519396255],[915136808,1656909442,1580048716,2427410438,541174144,426471313,2895897500,377900492],[595626550,2526492505,3268750992,1426594890,2629719919,4089391725,2168660026,612559499],[1477704732,3178528489,3740160515,2545498194,3392375604,3705891217,812596570,323708246],[3025717139,1739990882,1592161823,2129232543,810442694,255053218,2270136729,80610820],[589772000,3533443768,1703004527,3784951478,1873509366,780126764,2757475555,433210937],[2320317819,1069957109,236190227,3458097616,3720009213,337055136,2621524941,731809944],[2774537339,3411046755,273647540,2537021300,3363365190,711140022,4055518893,679060821],[470490618,170907555,2195308573,4266057601,541889551,2767258716,3245103545,279366622],[4014814691,3646616391,2859397811,17553049,3936978550,2820225293,3583668422,444603799],[84735946,3895385988,2872003950,3937461998,2492853947,961011385,883851764,778446560],[2566402595,3958661755,207723504,3890677852,1679165167,3972505408,1158648432,483709201],[732437249,2636121178,1274502888,4215631440,3520004453,2434507067,3146700434,321803356],[345092,2327197945,934163941,2556525496,1374457834,2856673930,157092700,745708941],[3900957620,1727085290,4282440747,3937431436,3232616717,696244212,453550297,734116642],[1657058724,2833357887,4038948006,1443072873,3603204259,2590287146,3725515807,387836028],[251657202,1701824280,2857245343,181554118,1516443835,3439522876,2020935185,522233023],[2900465676,1790054545,4142370388,1660450581,1601601488,3742214822,3792872939,215807104],[588239485,697046106,3679536056,2323705158,3349554075,4110389822,1846072309,94411816],[2687165154,2979254914,1713281360,3163747373,423293223,2784665428,594541653,767491857],[2266174141,3763507798,773463968,296161068,401397208,1233766448,3212491745,401817388],[100027661,2498648979,3365702594,968479783,369113379,3369031531,2782583834,237886177],[2030721740,3194984656,3538942537,195921132,4015788899,4294231359,389034523,482822656],[951727455,195854881,1320036442,3003552226,1070595864,2060768419,269716788,720181904],[3786717874,2413050671,424778962,3913805607,421781123,944509859,1521304486,13051805],[2776533978,1691423377,3557183130,924361279,165612839,3055523157,3190111684,433755689],[2420253531,3979128493,3782522781,2157219706,2542695183,3048388341,2770047291,364346270],[1239438364,3271689334,2701977150,2827140434,75587324,2760525127,2530532348,739585695],[435016372,2942403551,1904748557,3080395090,3495156739,3756863510,288715641,675183923],[3132978302,1880222465,1670590596,641287253,4026717495,205609495,895854444,326095682],[4071663948,1736460649,1209838075,474264004,2184956152,239744931,1739729229,265860150],[1539769686,2776745819,670370971,1982673126,2878463702,3738096922,1665612108,566965385],[3441418235,2400625756,1845777093,1002745078,182547690,318185096,2202100062,642472575],[2615251103,3266522578,2723779423,2485554621,3526450174,4169051936,899739371,559627016],[3690885431,3447887814,3429408334,1590358423,1604516189,2795095689,3445389634,626770764],[3087613720,668523139,1401864245,1347055588,820028662,741326927,3646786062,379842421],[3425504542,3230637341,2063758216,521351732,2343384400,3732355187,2457399320,454974967],[243890081,227817303,1575040049,593390710,1822154877,1849877019,498483679,103648540],[501989047,1003254925,853713334,2559885673,665000848,2548678392,3018396633,392359640],[2800811239,4203946076,3019369254,2748388595,3773732682,1663862194,1508559345,457773580],[3640300070,418507617,3162798053,3416410401,1894867611,1658785397,1004744340,753332281],[4009523763,2461715172,4022836178,81354372,1339182386,1603128527,1624658926,571947033],[384333655,1312329229,4008776147,2562266276,2837678515,1599321052,1031057763,462365548],[3415994698,3198679548,648095351,2527072690,3667776856,1445739498,2028439539,201292415],[518677825,4092688338,262618962,2809889972,2394989713,857103406,2428334147,208151785],[3986231498,238595436,220031466,2608543650,10619678,3355866551,2883012682,547047029],[1932976038,2166803764,2180150040,94810070,1620995712,1524680694,738259148,487572608],[2440924418,4014852165,3788677698,1564418011,3392637106,3665279270,2996417186,624232176],[269892036,3245335431,3430393780,3317341203,220371150,631651485,809969785,486562283]],"private_shares":[[3697991322,4156627378,2717646048,36290363,2757831425,1081907512,1619067776,493595465],[1500709212,1382552261,3091206414,2783827331,1283084188,3628989281,3249698127,215072189],[3102573488,2420492144,3249283234,1549942696,2825951641,1746302062,1244139815,457791170],[1210538582,2419757035,2231866917,3360898830,1025648925,2101928209,1532724461,691465234],[4002220402,4265107772,3804846351,2397345502,2617456248,1756728724,2522056790,395448458],[802625035,1512934655,1113693386,1713721336,3633640885,2227830,1731350389,26993091],[47987289,292427753,4182065366,3595870776,660197001,709943066,3891262139,168488853],[99062092,561726630,240591907,976209469,744388856,139291124,4101658182,745709897],[3780386661,3065776001,2021953566,3477783020,2103962837,1725490457,1679595772,222681100],[2232374254,209346312,4169952259,3894048671,390928451,881361161,222055614,465778526],[2804803959,2204723595,1301861637,3523102815,3683489340,356287614,4029684084,113178408],[3879656395,632338906,192187269,1214944481,737124824,3891627713,3648793267,626459452],[2215118600,3972139675,3235695358,4160750355,10743584,3517542827,2214799315,679208575],[492633479,1778429640,3566805509,1757223613,659481594,2664122959,3542056093,267022723],[1243276703,2597688099,2902716270,1710760869,1559359892,2611156381,3203491216,101785546],[1135484581,3487800840,637338948,2760309657,881254827,3267671464,1091499148,579822837],[828173364,1779505608,2797142660,3417376441,3877833539,1458876266,1333543910,62680145],[1441005124,2222260194,1406645790,4077887512,3059359250,2996874607,3640459204,224585989],[694343551,761021190,2575178958,4141246159,1999650940,1372008919,1818258212,612560456],[1088698318,1361133844,3521869448,2760340218,141492057,3532438637,1521800615,624152755],[3601032670,3410946603,1723166075,285241045,1893134183,2841094528,3061643831,158553317],[1237080925,247513312,2904868739,1546759800,3979894607,1991858798,471257157,24156323],[2357625717,159282649,1619743694,67863337,3894736954,1689166852,2994286699,330582241],[374884612,1252291089,2082578026,3699576056,2146784366,1320991852,646120033,451977530],[2302490784,108964220,1796061539,3534024282,2950815551,1444017421,1380809259,590777540],[2991917252,2480796692,693682817,1432152851,799973938,4197615227,3574667893,144571957],[863096436,3745655512,2396411487,759834135,832257767,2062350144,4004575804,308503168],[3227369653,3049319834,2223171544,1532392786,1480549543,1137150315,2103157819,63566690],[4037928483,2892364253,2189306457,3694219429,2303512910,2167914430,1705634124,638087493],[1471373519,3831253819,1042367823,2109475608,779590022,191904520,970887857,533337541],[2481557415,257913817,2204930952,803952639,1035758307,2375858518,3597047954,112633656],[2837837862,2265175997,1979591300,3866061508,2953643258,2382993333,4017112347,182043075],[3750217574,4111497096,807365748,3870631221,3298521450,1468157722,3739785860,618683701],[259672270,145815584,1604594342,3617376565,4173919331,471819338,1686635271,683085474],[2125113091,69114729,4091523486,1087026665,1469620947,930804883,1596337899,220293664],[1186427445,212876545,257308711,1254049915,3311382290,896669447,752463114,280529196],[3449886252,311473315,2838971928,420131233,495645073,490585927,309738804,791304012],[1548237703,687593378,1663565806,1400059281,3191561085,3910497753,4068218146,715796821],[2374404835,4116663852,785563475,4212217034,4142625896,59630912,1075611541,798642381],[1298770507,3935298616,79934564,812445936,1769592586,1433587160,2824928574,731498632],[2170477673,1280814055,65282541,381258331,381342484,395087452,3140373577,166546924],[1832586851,3013667149,3698355865,1206962186,3152954042,1699026487,34793022,91414379],[719234016,1721519892,4187074033,1134923208,3674183565,3581504655,1993708663,442740806],[461135050,946082270,613433452,3463395542,536370297,2882703283,3768763005,154029705],[2457280154,2040358414,2742744827,3274892619,1722605759,3767519480,983632997,88615766],[1349355868,2669711517,346544846,3281361254,1479241163,2569897452,970606572,604937116],[980132175,626503962,3781474017,2321449986,2034926389,2625554322,350691986,786322364],[578790442,637007966,1753337935,3461014938,2658659926,3832060622,1461134579,84023798],[724063189,1259664047,1654458229,1646572540,1390580402,2018513035,4026376781,49116453],[444446274,2151616153,1204527823,3213391243,3101348728,279310972,63858196,338237561],[3944565337,153780086,2970897489,3456310938,546939868,3515520311,319537184,403356599],[3325115356,4077500726,3581964041,1633503848,3875342730,3906700980,1753933194,58816738],[1001163330,3509092481,4195431525,341691395,340923839,255566757,2006055395,251970700],[693232061,2998969060,2331720301,2705940011,980999995,504762894,1682222558,59827063]],"update_locked":false}"#; // Replace with actual string
        let wallet = deserialize_wallet(api_wallet_str);
        let shares_commitment = _compute_poseidon_hash(
            &[
                vec![wallet.clone().get_private_share_commitment()],
                wallet.clone().blinded_public_shares,
            ]
            .concat(),
        )
        .serialize_to_bytes();

        println!("shares commitment: {:?}", shares_commitment);

        let sk_root = "0x414cbf18e75998b3e069ef09c52b5a61c1ecd2898df59d4422f8816097eaa302";
        let (signing_key, verifying_key) = get_root_key(sk_root);

        let sig = gen_update_wallet_signature(wallet, &signing_key);
        let sig_bytes = sig.to_vec();

        println!("shares commitment signature: {:?}", sig_bytes);
    }
}
